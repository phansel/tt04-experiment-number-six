--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_experiment_number_six.v
    - transforms.v
    - transformer.v
  top_module:  "tt_um_experiment_number_six"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "4x2"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2 

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Paul Hansel"
  title:        "Experiment Number Six"
  language:     "Verilog" 
  description:  "ASCII ROM encoding the LaTeX characters needed to typeset the Laplace transforms of a few functions."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This project provides an ASCII encoding of the LaTeX code to 
      typeset a few dozen Laplace transforms of common functions.
      When the user sets the lower ui_in pins to a number, asserts 
      reset and then asserts ui_in 6 high, the project will begin 
      clocking out the transform char-by-char, with uio_out showing
      F(s) = L{f(t)} and uo_out showing f(t) itself. If either one
      is shorter than the other for a particular transform, empty 
      space characters are appended.  

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      You'd need to program ui_in[5:0] to some pattern (don't pick numbers 
      that are too high), toggle reset_n, then toggle ui_in[6] to start 
      printing.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - ui_in[5:0] : set the desired Laplace transform
    - ui_in[6] : start printing out the character at 1 char/clock.
    - ui_in[7] : clock division parameter: if 1, divide by 1; if 0, divide by 50_000_000 to print more slowly

# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - uio_out[7:0]: ASCII output of the left hand side ASCII LaTeX encoding
    - uo_out[7:0]: ASCII output of the right hand side ASCII LaTeX encoding
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - 

# The following fields are optional
  tag:          "memory, laplace, mathematics, LaTeX"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "phansel"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
